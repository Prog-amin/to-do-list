# Generated by Django 4.2.7 on 2025-08-11 20:47

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('color', models.CharField(default='#3B82F6', max_length=7)),
                ('description', models.TextField(blank=True)),
                ('usage_count', models.PositiveIntegerField(default=0)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='categories', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Categories',
                'ordering': ['-usage_count', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ContextEntry',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('content', models.TextField()),
                ('source', models.CharField(choices=[('whatsapp', 'WhatsApp'), ('email', 'Email'), ('notes', 'Notes'), ('manual', 'Manual Entry'), ('calendar', 'Calendar'), ('meeting', 'Meeting Notes')], max_length=20)),
                ('processed', models.BooleanField(default=False)),
                ('ai_insights', models.JSONField(blank=True, default=list)),
                ('extracted_keywords', models.JSONField(blank=True, default=list)),
                ('sentiment_score', models.FloatField(default=0.0, help_text='Sentiment analysis score (-1 to 1)')),
                ('urgency_score', models.FloatField(default=0.0, help_text='AI-detected urgency (0-1)')),
            ],
            options={
                'verbose_name_plural': 'Context Entries',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('name', models.CharField(max_length=50, unique=True)),
                ('usage_count', models.PositiveIntegerField(default=0)),
            ],
            options={
                'ordering': ['-usage_count', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField(blank=True)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('medium', 'Medium'), ('high', 'High'), ('urgent', 'Urgent')], default='medium', max_length=10)),
                ('status', models.CharField(choices=[('todo', 'To Do'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('cancelled', 'Cancelled')], default='todo', max_length=15)),
                ('deadline', models.DateTimeField(blank=True, null=True)),
                ('estimated_duration', models.PositiveIntegerField(default=60, help_text='Estimated duration in minutes')),
                ('actual_duration', models.PositiveIntegerField(blank=True, help_text='Actual completion time in minutes', null=True)),
                ('ai_priority_score', models.FloatField(default=0.0, help_text='AI-calculated priority score (0-100)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('ai_confidence_score', models.FloatField(default=0.0, help_text='AI confidence in suggestions (0-100)', validators=[django.core.validators.MinValueValidator(0.0), django.core.validators.MaxValueValidator(100.0)])),
                ('ai_reasoning', models.TextField(blank=True, help_text='AI reasoning for suggestions')),
                ('ai_enhanced_description', models.TextField(blank=True)),
                ('ai_suggested_tags', models.JSONField(blank=True, default=list)),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='tasks.category')),
                ('dependencies', models.ManyToManyField(blank=True, to='tasks.task')),
                ('related_contexts', models.ManyToManyField(blank=True, to='tasks.contextentry')),
                ('tags', models.ManyToManyField(blank=True, to='tasks.tag')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tasks', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-ai_priority_score', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TaskHistory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('field_changed', models.CharField(max_length=50)),
                ('old_value', models.TextField(blank=True)),
                ('new_value', models.TextField(blank=True)),
                ('change_reason', models.CharField(blank=True, max_length=100)),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='history', to='tasks.task')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': 'Task Histories',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='TaskComment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('content', models.TextField()),
                ('is_ai_generated', models.BooleanField(default=False)),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='tasks.task')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ProductivityMetrics',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('date', models.DateField()),
                ('tasks_completed', models.PositiveIntegerField(default=0)),
                ('tasks_created', models.PositiveIntegerField(default=0)),
                ('total_focus_time', models.PositiveIntegerField(default=0, help_text='In minutes')),
                ('ai_suggestions_accepted', models.PositiveIntegerField(default=0)),
                ('ai_accuracy_score', models.FloatField(default=0.0)),
                ('overall_productivity_score', models.FloatField(default=0.0)),
                ('context_processing_score', models.FloatField(default=0.0)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='productivity_metrics', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-date'],
            },
        ),
        migrations.AddField(
            model_name='contextentry',
            name='generated_tasks',
            field=models.ManyToManyField(blank=True, related_name='source_contexts', to='tasks.task'),
        ),
        migrations.AddField(
            model_name='contextentry',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='context_entries', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddIndex(
            model_name='task',
            index=models.Index(fields=['user', 'status'], name='tasks_user_id_a53e17_idx'),
        ),
        migrations.AddIndex(
            model_name='task',
            index=models.Index(fields=['deadline'], name='tasks_deadlin_7f16a6_idx'),
        ),
        migrations.AddIndex(
            model_name='task',
            index=models.Index(fields=['ai_priority_score'], name='tasks_ai_prio_a711d6_idx'),
        ),
        migrations.AddIndex(
            model_name='task',
            index=models.Index(fields=['category'], name='tasks_categor_9c8680_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='productivitymetrics',
            unique_together={('user', 'date')},
        ),
        migrations.AddIndex(
            model_name='contextentry',
            index=models.Index(fields=['user', 'processed'], name='context_ent_user_id_0a6d19_idx'),
        ),
        migrations.AddIndex(
            model_name='contextentry',
            index=models.Index(fields=['source'], name='context_ent_source_7b8181_idx'),
        ),
        migrations.AddIndex(
            model_name='contextentry',
            index=models.Index(fields=['created_at'], name='context_ent_created_2440e5_idx'),
        ),
    ]

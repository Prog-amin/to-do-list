# Generated by Django 4.2.7 on 2025-08-11 20:47

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('tasks', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='AIModelPerformance',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('model_name', models.CharField(max_length=100)),
                ('model_version', models.CharField(max_length=50)),
                ('accuracy_score', models.FloatField()),
                ('precision_score', models.FloatField()),
                ('recall_score', models.FloatField()),
                ('f1_score', models.FloatField()),
                ('total_requests', models.PositiveIntegerField(default=0)),
                ('successful_requests', models.PositiveIntegerField(default=0)),
                ('failed_requests', models.PositiveIntegerField(default=0)),
                ('average_response_time', models.FloatField(help_text='Average response time in seconds')),
                ('total_tokens_used', models.PositiveIntegerField(default=0)),
                ('estimated_cost', models.DecimalField(decimal_places=4, default=0, max_digits=10)),
                ('date_from', models.DateField()),
                ('date_to', models.DateField()),
            ],
            options={
                'db_table': 'ai_model_performance',
                'ordering': ['-date_to'],
                'unique_together': {('model_name', 'model_version', 'date_from', 'date_to')},
            },
        ),
        migrations.CreateModel(
            name='AIConfiguration',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('gemini_model', models.CharField(default='gemini-pro', max_length=50)),
                ('temperature', models.FloatField(default=0.7)),
                ('max_tokens', models.PositiveIntegerField(default=1000)),
                ('auto_prioritization', models.BooleanField(default=True)),
                ('auto_categorization', models.BooleanField(default=True)),
                ('deadline_suggestions', models.BooleanField(default=True)),
                ('context_analysis', models.BooleanField(default=True)),
                ('min_confidence_threshold', models.FloatField(default=0.6)),
                ('processing_frequency', models.CharField(choices=[('realtime', 'Real-time'), ('hourly', 'Hourly'), ('daily', 'Daily')], default='realtime', max_length=20)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='ai_config', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'ai_configurations',
            },
        ),
        migrations.CreateModel(
            name='ContextPattern',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('pattern_name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('keywords', models.JSONField(default=list)),
                ('frequency_score', models.FloatField(help_text='How often this pattern occurs')),
                ('importance_score', models.FloatField(help_text='How important this pattern is')),
                ('common_times', models.JSONField(default=list, help_text='Common times when pattern occurs')),
                ('common_days', models.JSONField(default=list, help_text='Common days when pattern occurs')),
                ('suggested_actions', models.JSONField(default=list)),
                ('auto_generated_tasks', models.PositiveIntegerField(default=0)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='context_patterns', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'context_patterns',
                'ordering': ['-importance_score', '-frequency_score'],
                'unique_together': {('user', 'pattern_name')},
            },
        ),
        migrations.CreateModel(
            name='AIProcessingJob',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('job_type', models.CharField(choices=[('task_prioritization', 'Task Prioritization'), ('context_analysis', 'Context Analysis'), ('deadline_suggestion', 'Deadline Suggestion'), ('categorization', 'Auto Categorization'), ('enhancement', 'Task Enhancement'), ('bulk_processing', 'Bulk Processing')], max_length=30)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('cancelled', 'Cancelled')], default='pending', max_length=15)),
                ('input_data', models.JSONField(default=dict)),
                ('output_data', models.JSONField(blank=True, default=dict)),
                ('confidence_score', models.FloatField(blank=True, null=True)),
                ('processing_time', models.FloatField(blank=True, help_text='Time in seconds', null=True)),
                ('error_message', models.TextField(blank=True)),
                ('retry_count', models.PositiveIntegerField(default=0)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_jobs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'ai_processing_jobs',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['user', 'status'], name='ai_processi_user_id_2ab0e4_idx'), models.Index(fields=['job_type', 'status'], name='ai_processi_job_typ_306e78_idx')],
            },
        ),
        migrations.CreateModel(
            name='AIInsight',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('insight_type', models.CharField(choices=[('productivity_pattern', 'Productivity Pattern'), ('time_optimization', 'Time Optimization'), ('priority_suggestion', 'Priority Suggestion'), ('deadline_warning', 'Deadline Warning'), ('context_connection', 'Context Connection'), ('workload_balance', 'Workload Balance'), ('focus_recommendation', 'Focus Recommendation')], max_length=30)),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('confidence_score', models.FloatField()),
                ('impact_score', models.FloatField(help_text='Expected impact (0-1)')),
                ('is_actionable', models.BooleanField(default=True)),
                ('is_read', models.BooleanField(default=False)),
                ('is_dismissed', models.BooleanField(default=False)),
                ('user_feedback', models.CharField(blank=True, choices=[('helpful', 'Helpful'), ('not_helpful', 'Not Helpful'), ('already_known', 'Already Known')], max_length=20)),
                ('related_contexts', models.ManyToManyField(blank=True, to='tasks.contextentry')),
                ('related_tasks', models.ManyToManyField(blank=True, to='tasks.task')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ai_insights', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'ai_insights',
                'ordering': ['-confidence_score', '-created_at'],
                'indexes': [models.Index(fields=['user', 'is_read'], name='ai_insights_user_id_4e571d_idx'), models.Index(fields=['insight_type'], name='ai_insights_insight_71cf81_idx')],
            },
        ),
    ]
